# jenkins controller install
---
- name: create jenkins directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
    state: directory
  with_items:
    - "{{ containers_path }}/{{ app_name }}/data"
    - "{{ containers_path }}/{{ app_name }}/certs"

- name: copy dockerfile
  ansible.builtin.template:
    src: dockerfile.j2
    dest: "{{ containers_path }}/{{ app_name }}/Dockerfile"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: u=rwX,g=rX,o=rX

- name: run dockerfile
  containers.podman.podman_image:
    force: true
    name: my_jenkins:latest
    path: "{{ containers_path }}/{{ app_name }}"
    build:
      format: docker
  register: dockerfile_build

- name: debug dockerfile build
  ansible.builtin.debug:
    msg: "{{ dockerfile_build }}"
  when: verbose

- name: create jenkins container
  containers.podman.podman_container:
    recreate: true
    name: "{{ app_name }}"
    hostname: "{{ hostname }}"
    image: localhost/my_jenkins:latest
    ports:
      - "{{ app_port }}:8080/tcp"
      - "50000:50000/tcp"
    volumes:
      - "{{ containers_path }}/{{ app_name }}/data:/var/jenkins_home"
      - "{{ containers_path }}/{{ app_name }}/certs:/certs/client:ro"
    env:
      DOCKER_HOST: "tcp://docker:2376"
      DOCKER_CERT_PATH: "/certs/client"
      DOCKER_TLS_VERIFY: 1
      TZ: "America/Los_Angeles"
      USER_UID: "{{ app_uid }}"
      USER_GID: "{{ app_gid }}"
    generate_systemd: {"path": "/etc/systemd/system"}
    state: present
  when: dockerfile_build.changed
  register: container_state

- name: prune old images
  ansible.builtin.command:
    cmd: 'podman image prune -f -a'
  register: prune_debug

- name: debug
  ansible.builtin.debug:
    msg: "{{ prune_debug }}"
  when: verbose

- name: enable and start
  ansible.builtin.systemd:
    daemon-reload: true
    name: "container-{{ app_name }}"
    enabled: true
    state: started
  when: container_state.changed
  register: files_systemctl_debug
